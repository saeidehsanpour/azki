// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PerformanceManagementSystem.Data;

#nullable disable

namespace PerformanceManagementSystem.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PerformanceManagementSystem.Data.Models.AppRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("PerformanceManagementSystem.Data.Models.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("character varying(70)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("PositionId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("RegisterDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("PositionId");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("PerformanceManagementSystem.Data.Models.AppUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("PerformanceManagementSystem.Data.Models.AppUserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("PerformanceManagementSystem.Data.Models.Competency", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<Guid>("CompetencyCategoryId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CompetencyCategoryId");

                    b.ToTable("Competencies");
                });

            modelBuilder.Entity("PerformanceManagementSystem.Data.Models.CompetencyCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("CompetencyCategories");
                });

            modelBuilder.Entity("PerformanceManagementSystem.Data.Models.CompetencyCategoryPositionMapping", b =>
                {
                    b.Property<Guid>("CompetencyCategoryId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PositionId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("CompetencyCategoryId", "PositionId");

                    b.HasIndex("PositionId");

                    b.ToTable("CompetencyCategoryPositionMappings");
                });

            modelBuilder.Entity("PerformanceManagementSystem.Data.Models.CompetencyLevel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<Guid>("CompetencyId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CompetencyId");

                    b.ToTable("CompetencyLevels");
                });

            modelBuilder.Entity("PerformanceManagementSystem.Data.Models.CompetencyLevelTaskMapping", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<Guid>("CompetencyLevelId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("TaskOfPeriodId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CompetencyLevelId");

                    b.HasIndex("TaskOfPeriodId");

                    b.ToTable("CompetencyLevelTaskMappings");
                });

            modelBuilder.Entity("PerformanceManagementSystem.Data.Models.ManagerEvaluation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("Continue")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ManagerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PerformanceManagementPeriodUserMappingId")
                        .HasColumnType("uuid");

                    b.Property<string>("ShouldImprove")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ManagerId");

                    b.HasIndex("PerformanceManagementPeriodUserMappingId");

                    b.ToTable("ManagerEvaluations");
                });

            modelBuilder.Entity("PerformanceManagementSystem.Data.Models.ManagerEvaluationAnswer", b =>
                {
                    b.Property<Guid>("ManagerEvaluationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ManagerEvaluationQuestionId")
                        .HasColumnType("uuid");

                    b.Property<int>("Answer")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("ManagerEvaluationId", "ManagerEvaluationQuestionId");

                    b.HasIndex("ManagerEvaluationQuestionId");

                    b.ToTable("ManagerEvaluationAnswers");
                });

            modelBuilder.Entity("PerformanceManagementSystem.Data.Models.ManagerEvaluationQuestion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("ManagerEvaluationQuestions");
                });

            modelBuilder.Entity("PerformanceManagementSystem.Data.Models.Organization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<Guid>("AdminUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AdminUserId");

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("PerformanceManagementSystem.Data.Models.PerformanceManagementPeriod", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("ExceptionScoreEndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("ExceptionScoreStartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("ManagerScoreEndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("ManagerScoreStartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("OtherScoreEndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("OtherScoreStartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("ReportEndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("ReportStartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("SelfScoreEndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("SelfScoreStartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("PerformanceManagementPeriods");
                });

            modelBuilder.Entity("PerformanceManagementSystem.Data.Models.PerformanceManagementPeriodUserMapping", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("PerformanceManagementPeriodId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PerformanceManagementPeriodId");

                    b.HasIndex("UserId");

                    b.ToTable("PerformanceManagementPeriodUserMappings");
                });

            modelBuilder.Entity("PerformanceManagementSystem.Data.Models.Position", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Positions");
                });

            modelBuilder.Entity("PerformanceManagementSystem.Data.Models.RoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("PerformanceManagementSystem.Data.Models.TaskOfPeriod", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("Continue")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("DutyInTask")
                        .HasColumnType("integer");

                    b.Property<Guid?>("MainTaskOfPeriodId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PerformanceManagementPeriodUserMappingId")
                        .HasColumnType("uuid");

                    b.Property<string>("RoleAndInfluence")
                        .HasColumnType("text");

                    b.Property<string>("ShouldImprove")
                        .HasColumnType("text");

                    b.Property<int>("SuccessRate")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("MainTaskOfPeriodId");

                    b.HasIndex("PerformanceManagementPeriodUserMappingId");

                    b.HasIndex("UserId");

                    b.ToTable("TaskOfPeriods");
                });

            modelBuilder.Entity("PerformanceManagementSystem.Data.Models.TaskUserMention", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TaskOfPeriodId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("Manager")
                        .HasColumnType("boolean");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("UserId", "TaskOfPeriodId");

                    b.HasIndex("TaskOfPeriodId");

                    b.ToTable("TaskUserMentions");
                });

            modelBuilder.Entity("PerformanceManagementSystem.Data.Models.UserException", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("Continue")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ManagerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PerformanceManagementPeriodUserMappingId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ManagerId");

                    b.HasIndex("PerformanceManagementPeriodUserMappingId");

                    b.ToTable("UserExceptions");
                });

            modelBuilder.Entity("PerformanceManagementSystem.Data.Models.UserExceptionCompetencyMapping", b =>
                {
                    b.Property<Guid>("CompetencyId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserExceptionId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.HasKey("CompetencyId", "UserExceptionId");

                    b.HasIndex("UserExceptionId");

                    b.ToTable("UserExceptionCompetencyMappings");
                });

            modelBuilder.Entity("PerformanceManagementSystem.Data.Models.UserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("PerformanceManagementSystem.Data.Models.UserManagerMapping", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ManagerId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "ManagerId");

                    b.HasIndex("ManagerId");

                    b.ToTable("UserManagerMappings");
                });

            modelBuilder.Entity("PerformanceManagementSystem.Data.Models.UserToken", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("PerformanceManagementSystem.Data.Models.AppUser", b =>
                {
                    b.HasOne("PerformanceManagementSystem.Data.Models.Position", "Position")
                        .WithMany("Users")
                        .HasForeignKey("PositionId");

                    b.Navigation("Position");
                });

            modelBuilder.Entity("PerformanceManagementSystem.Data.Models.AppUserClaim", b =>
                {
                    b.HasOne("PerformanceManagementSystem.Data.Models.AppUser", "AppUser")
                        .WithMany("UserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("PerformanceManagementSystem.Data.Models.AppUserRole", b =>
                {
                    b.HasOne("PerformanceManagementSystem.Data.Models.AppRole", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PerformanceManagementSystem.Data.Models.AppUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PerformanceManagementSystem.Data.Models.Competency", b =>
                {
                    b.HasOne("PerformanceManagementSystem.Data.Models.CompetencyCategory", "CompetencyCategory")
                        .WithMany("Competencies")
                        .HasForeignKey("CompetencyCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompetencyCategory");
                });

            modelBuilder.Entity("PerformanceManagementSystem.Data.Models.CompetencyCategoryPositionMapping", b =>
                {
                    b.HasOne("PerformanceManagementSystem.Data.Models.CompetencyCategory", "CompetencyCategory")
                        .WithMany("CompetencyCategoryPositionMappings")
                        .HasForeignKey("CompetencyCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PerformanceManagementSystem.Data.Models.Position", "Position")
                        .WithMany("CompetencyCategoryPositionMappings")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompetencyCategory");

                    b.Navigation("Position");
                });

            modelBuilder.Entity("PerformanceManagementSystem.Data.Models.CompetencyLevel", b =>
                {
                    b.HasOne("PerformanceManagementSystem.Data.Models.Competency", "Competency")
                        .WithMany("CompetencyLevels")
                        .HasForeignKey("CompetencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Competency");
                });

            modelBuilder.Entity("PerformanceManagementSystem.Data.Models.CompetencyLevelTaskMapping", b =>
                {
                    b.HasOne("PerformanceManagementSystem.Data.Models.CompetencyLevel", "CompetencyLevel")
                        .WithMany("CompetencyLevelTaskMappings")
                        .HasForeignKey("CompetencyLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PerformanceManagementSystem.Data.Models.TaskOfPeriod", "TaskOfPeriod")
                        .WithMany("CompetencyLevelTaskMappings")
                        .HasForeignKey("TaskOfPeriodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompetencyLevel");

                    b.Navigation("TaskOfPeriod");
                });

            modelBuilder.Entity("PerformanceManagementSystem.Data.Models.ManagerEvaluation", b =>
                {
                    b.HasOne("PerformanceManagementSystem.Data.Models.AppUser", "Manager")
                        .WithMany()
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PerformanceManagementSystem.Data.Models.PerformanceManagementPeriodUserMapping", "PerformanceManagementPeriodUserMapping")
                        .WithMany()
                        .HasForeignKey("PerformanceManagementPeriodUserMappingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manager");

                    b.Navigation("PerformanceManagementPeriodUserMapping");
                });

            modelBuilder.Entity("PerformanceManagementSystem.Data.Models.ManagerEvaluationAnswer", b =>
                {
                    b.HasOne("PerformanceManagementSystem.Data.Models.ManagerEvaluation", "ManagerEvaluation")
                        .WithMany("ManagerEvaluationAnswers")
                        .HasForeignKey("ManagerEvaluationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PerformanceManagementSystem.Data.Models.ManagerEvaluationQuestion", "ManagerEvaluationQuestion")
                        .WithMany("ManagerEvaluationAnswers")
                        .HasForeignKey("ManagerEvaluationQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ManagerEvaluation");

                    b.Navigation("ManagerEvaluationQuestion");
                });

            modelBuilder.Entity("PerformanceManagementSystem.Data.Models.Organization", b =>
                {
                    b.HasOne("PerformanceManagementSystem.Data.Models.AppUser", "AdminUser")
                        .WithMany()
                        .HasForeignKey("AdminUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AdminUser");
                });

            modelBuilder.Entity("PerformanceManagementSystem.Data.Models.PerformanceManagementPeriod", b =>
                {
                    b.HasOne("PerformanceManagementSystem.Data.Models.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("PerformanceManagementSystem.Data.Models.PerformanceManagementPeriodUserMapping", b =>
                {
                    b.HasOne("PerformanceManagementSystem.Data.Models.PerformanceManagementPeriod", "PerformanceManagementPeriod")
                        .WithMany("PerformanceManagementPeriodUserMappings")
                        .HasForeignKey("PerformanceManagementPeriodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PerformanceManagementSystem.Data.Models.AppUser", "User")
                        .WithMany("PerformanceManagementPeriodUserMappings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PerformanceManagementPeriod");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PerformanceManagementSystem.Data.Models.Position", b =>
                {
                    b.HasOne("PerformanceManagementSystem.Data.Models.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("PerformanceManagementSystem.Data.Models.RoleClaim", b =>
                {
                    b.HasOne("PerformanceManagementSystem.Data.Models.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PerformanceManagementSystem.Data.Models.TaskOfPeriod", b =>
                {
                    b.HasOne("PerformanceManagementSystem.Data.Models.TaskOfPeriod", "MainTaskOfPeriod")
                        .WithMany()
                        .HasForeignKey("MainTaskOfPeriodId");

                    b.HasOne("PerformanceManagementSystem.Data.Models.PerformanceManagementPeriodUserMapping", "PerformanceManagementPeriodUserMapping")
                        .WithMany("TaskOfPeriods")
                        .HasForeignKey("PerformanceManagementPeriodUserMappingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PerformanceManagementSystem.Data.Models.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("MainTaskOfPeriod");

                    b.Navigation("PerformanceManagementPeriodUserMapping");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PerformanceManagementSystem.Data.Models.TaskUserMention", b =>
                {
                    b.HasOne("PerformanceManagementSystem.Data.Models.TaskOfPeriod", "TaskOfPeriod")
                        .WithMany("TaskUserMentions")
                        .HasForeignKey("TaskOfPeriodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PerformanceManagementSystem.Data.Models.AppUser", "User")
                        .WithMany("TaskUserMentions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TaskOfPeriod");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PerformanceManagementSystem.Data.Models.UserException", b =>
                {
                    b.HasOne("PerformanceManagementSystem.Data.Models.AppUser", "Manager")
                        .WithMany()
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PerformanceManagementSystem.Data.Models.PerformanceManagementPeriodUserMapping", "PerformanceManagementPeriodUserMapping")
                        .WithMany()
                        .HasForeignKey("PerformanceManagementPeriodUserMappingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manager");

                    b.Navigation("PerformanceManagementPeriodUserMapping");
                });

            modelBuilder.Entity("PerformanceManagementSystem.Data.Models.UserExceptionCompetencyMapping", b =>
                {
                    b.HasOne("PerformanceManagementSystem.Data.Models.Competency", "Competency")
                        .WithMany("UserExceptionCompetencyMappings")
                        .HasForeignKey("CompetencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PerformanceManagementSystem.Data.Models.UserException", "UserException")
                        .WithMany("UserExceptionCompetencyMappings")
                        .HasForeignKey("UserExceptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Competency");

                    b.Navigation("UserException");
                });

            modelBuilder.Entity("PerformanceManagementSystem.Data.Models.UserLogin", b =>
                {
                    b.HasOne("PerformanceManagementSystem.Data.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PerformanceManagementSystem.Data.Models.UserManagerMapping", b =>
                {
                    b.HasOne("PerformanceManagementSystem.Data.Models.AppUser", "Manager")
                        .WithMany("Users")
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PerformanceManagementSystem.Data.Models.AppUser", "User")
                        .WithMany("Managers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manager");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PerformanceManagementSystem.Data.Models.UserToken", b =>
                {
                    b.HasOne("PerformanceManagementSystem.Data.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PerformanceManagementSystem.Data.Models.AppRole", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("PerformanceManagementSystem.Data.Models.AppUser", b =>
                {
                    b.Navigation("Managers");

                    b.Navigation("PerformanceManagementPeriodUserMappings");

                    b.Navigation("TaskUserMentions");

                    b.Navigation("UserClaims");

                    b.Navigation("UserRoles");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("PerformanceManagementSystem.Data.Models.Competency", b =>
                {
                    b.Navigation("CompetencyLevels");

                    b.Navigation("UserExceptionCompetencyMappings");
                });

            modelBuilder.Entity("PerformanceManagementSystem.Data.Models.CompetencyCategory", b =>
                {
                    b.Navigation("Competencies");

                    b.Navigation("CompetencyCategoryPositionMappings");
                });

            modelBuilder.Entity("PerformanceManagementSystem.Data.Models.CompetencyLevel", b =>
                {
                    b.Navigation("CompetencyLevelTaskMappings");
                });

            modelBuilder.Entity("PerformanceManagementSystem.Data.Models.ManagerEvaluation", b =>
                {
                    b.Navigation("ManagerEvaluationAnswers");
                });

            modelBuilder.Entity("PerformanceManagementSystem.Data.Models.ManagerEvaluationQuestion", b =>
                {
                    b.Navigation("ManagerEvaluationAnswers");
                });

            modelBuilder.Entity("PerformanceManagementSystem.Data.Models.PerformanceManagementPeriod", b =>
                {
                    b.Navigation("PerformanceManagementPeriodUserMappings");
                });

            modelBuilder.Entity("PerformanceManagementSystem.Data.Models.PerformanceManagementPeriodUserMapping", b =>
                {
                    b.Navigation("TaskOfPeriods");
                });

            modelBuilder.Entity("PerformanceManagementSystem.Data.Models.Position", b =>
                {
                    b.Navigation("CompetencyCategoryPositionMappings");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("PerformanceManagementSystem.Data.Models.TaskOfPeriod", b =>
                {
                    b.Navigation("CompetencyLevelTaskMappings");

                    b.Navigation("TaskUserMentions");
                });

            modelBuilder.Entity("PerformanceManagementSystem.Data.Models.UserException", b =>
                {
                    b.Navigation("UserExceptionCompetencyMappings");
                });
#pragma warning restore 612, 618
        }
    }
}
